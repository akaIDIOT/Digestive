#!/usr/bin/env python3

from concurrent.futures import ThreadPoolExecutor, wait
from math import log2

from digestive.io import Source
from digestive.main import parse_arguments


_sizes = ['bytes', 'KiB', 'MiB', 'GiB', 'TiB', 'EiB', 'ZiB']


def file_size(size):
    order = int(log2(size) // 10)
    return '{:.4g} {}'.format(size / (1 << (order * 10)), _sizes[order])


if __name__ == '__main__':
    args = parse_arguments()

    with ThreadPoolExecutor(args.jobs) as executor:
        for file in args.sources:
            with Source(file) as source:
                # instantiate sinks from requested types
                sinks = [sink() for sink in args.sinks]
                print('{} ({})'.format(file, file_size(len(source))))
                generator = source.blocks()
                block = next(generator, False)
                while block:
                    futures = [executor.submit(sink.update, block) for sink in sinks]
                    block = next(generator, False)
                    wait(futures)

                for sink in sinks:
                    print('  {:<12} {}'.format(sink.name, sink.digest()))
